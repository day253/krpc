// Code generated by Kitex v0.5.2. DO NOT EDIT.

package predictor

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	service "github.com/ishumei/krpc/protocols/arbiter/kitex_gen/com/shumei/service"
)

func serviceInfo() *kitex.ServiceInfo {
	return predictorServiceInfo
}

var predictorServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Predictor"
	handlerType := (*service.Predictor)(nil)
	methods := map[string]kitex.MethodInfo{
		"predict": kitex.NewMethodInfo(predictHandler, newPredictorPredictArgs, newPredictorPredictResult, false),
		"health":  kitex.NewMethodInfo(healthHandler, newPredictorHealthArgs, newPredictorHealthResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "service",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func predictHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*service.PredictorPredictArgs)
	realResult := result.(*service.PredictorPredictResult)
	success, err := handler.(service.Predictor).Predict(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPredictorPredictArgs() interface{} {
	return service.NewPredictorPredictArgs()
}

func newPredictorPredictResult() interface{} {
	return service.NewPredictorPredictResult()
}

func healthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*service.PredictorHealthResult)
	success, err := handler.(service.Predictor).Health(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newPredictorHealthArgs() interface{} {
	return service.NewPredictorHealthArgs()
}

func newPredictorHealthResult() interface{} {
	return service.NewPredictorHealthResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Predict(ctx context.Context, request *service.PredictRequest) (r *service.PredictResult_, err error) {
	var _args service.PredictorPredictArgs
	_args.Request = request
	var _result service.PredictorPredictResult
	if err = p.c.Call(ctx, "predict", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Health(ctx context.Context) (r bool, err error) {
	var _args service.PredictorHealthArgs
	var _result service.PredictorHealthResult
	if err = p.c.Call(ctx, "health", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
