// Code generated by thriftgo (0.3.17). DO NOT EDIT.

package re

import (
	"bytes"
	"context"
	"fmt"
	thrift "github.com/cloudwego/kitex/pkg/protocol/bthrift/apache"
	"strings"
)

type Audio struct {
	Content      []byte `thrift:"content,1,optional" frugal:"1,optional,binary" json:"content,omitempty"`
	SampleDepth  *int32 `thrift:"sampleDepth,2,optional" frugal:"2,optional,i32" json:"sampleDepth,omitempty"`
	ChannelCount *int32 `thrift:"channelCount,3,optional" frugal:"3,optional,i32" json:"channelCount,omitempty"`
	SampleRate   *int64 `thrift:"sampleRate,4,optional" frugal:"4,optional,i64" json:"sampleRate,omitempty"`
	Duration     *int64 `thrift:"duration,5,optional" frugal:"5,optional,i64" json:"duration,omitempty"`
}

func NewAudio() *Audio {
	return &Audio{}
}

func (p *Audio) InitDefault() {
}

var Audio_Content_DEFAULT []byte

func (p *Audio) GetContent() (v []byte) {
	if !p.IsSetContent() {
		return Audio_Content_DEFAULT
	}
	return p.Content
}

var Audio_SampleDepth_DEFAULT int32

func (p *Audio) GetSampleDepth() (v int32) {
	if !p.IsSetSampleDepth() {
		return Audio_SampleDepth_DEFAULT
	}
	return *p.SampleDepth
}

var Audio_ChannelCount_DEFAULT int32

func (p *Audio) GetChannelCount() (v int32) {
	if !p.IsSetChannelCount() {
		return Audio_ChannelCount_DEFAULT
	}
	return *p.ChannelCount
}

var Audio_SampleRate_DEFAULT int64

func (p *Audio) GetSampleRate() (v int64) {
	if !p.IsSetSampleRate() {
		return Audio_SampleRate_DEFAULT
	}
	return *p.SampleRate
}

var Audio_Duration_DEFAULT int64

func (p *Audio) GetDuration() (v int64) {
	if !p.IsSetDuration() {
		return Audio_Duration_DEFAULT
	}
	return *p.Duration
}
func (p *Audio) SetContent(val []byte) {
	p.Content = val
}
func (p *Audio) SetSampleDepth(val *int32) {
	p.SampleDepth = val
}
func (p *Audio) SetChannelCount(val *int32) {
	p.ChannelCount = val
}
func (p *Audio) SetSampleRate(val *int64) {
	p.SampleRate = val
}
func (p *Audio) SetDuration(val *int64) {
	p.Duration = val
}

var fieldIDToName_Audio = map[int16]string{
	1: "content",
	2: "sampleDepth",
	3: "channelCount",
	4: "sampleRate",
	5: "duration",
}

func (p *Audio) IsSetContent() bool {
	return p.Content != nil
}

func (p *Audio) IsSetSampleDepth() bool {
	return p.SampleDepth != nil
}

func (p *Audio) IsSetChannelCount() bool {
	return p.ChannelCount != nil
}

func (p *Audio) IsSetSampleRate() bool {
	return p.SampleRate != nil
}

func (p *Audio) IsSetDuration() bool {
	return p.Duration != nil
}

func (p *Audio) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Audio[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Audio) ReadField1(iprot thrift.TProtocol) error {

	var _field []byte
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		_field = []byte(v)
	}
	p.Content = _field
	return nil
}
func (p *Audio) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SampleDepth = _field
	return nil
}
func (p *Audio) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ChannelCount = _field
	return nil
}
func (p *Audio) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SampleRate = _field
	return nil
}
func (p *Audio) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Duration = _field
	return nil
}

func (p *Audio) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Audio"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Audio) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBinary([]byte(p.Content)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Audio) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSampleDepth() {
		if err = oprot.WriteFieldBegin("sampleDepth", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SampleDepth); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Audio) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetChannelCount() {
		if err = oprot.WriteFieldBegin("channelCount", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ChannelCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Audio) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSampleRate() {
		if err = oprot.WriteFieldBegin("sampleRate", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SampleRate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Audio) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDuration() {
		if err = oprot.WriteFieldBegin("duration", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Duration); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Audio) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Audio(%+v)", *p)

}

func (p *Audio) DeepEqual(ano *Audio) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Content) {
		return false
	}
	if !p.Field2DeepEqual(ano.SampleDepth) {
		return false
	}
	if !p.Field3DeepEqual(ano.ChannelCount) {
		return false
	}
	if !p.Field4DeepEqual(ano.SampleRate) {
		return false
	}
	if !p.Field5DeepEqual(ano.Duration) {
		return false
	}
	return true
}

func (p *Audio) Field1DeepEqual(src []byte) bool {

	if bytes.Compare(p.Content, src) != 0 {
		return false
	}
	return true
}
func (p *Audio) Field2DeepEqual(src *int32) bool {

	if p.SampleDepth == src {
		return true
	} else if p.SampleDepth == nil || src == nil {
		return false
	}
	if *p.SampleDepth != *src {
		return false
	}
	return true
}
func (p *Audio) Field3DeepEqual(src *int32) bool {

	if p.ChannelCount == src {
		return true
	} else if p.ChannelCount == nil || src == nil {
		return false
	}
	if *p.ChannelCount != *src {
		return false
	}
	return true
}
func (p *Audio) Field4DeepEqual(src *int64) bool {

	if p.SampleRate == src {
		return true
	} else if p.SampleRate == nil || src == nil {
		return false
	}
	if *p.SampleRate != *src {
		return false
	}
	return true
}
func (p *Audio) Field5DeepEqual(src *int64) bool {

	if p.Duration == src {
		return true
	} else if p.Duration == nil || src == nil {
		return false
	}
	if *p.Duration != *src {
		return false
	}
	return true
}

type AudioPredictRequest struct {
	RequestId    *string `thrift:"requestId,1,optional" frugal:"1,optional,string" json:"requestId,omitempty"`
	Organization *string `thrift:"organization,2,optional" frugal:"2,optional,string" json:"organization,omitempty"`
	Audio        *Audio  `thrift:"audio,3,optional" frugal:"3,optional,Audio" json:"audio,omitempty"`
}

func NewAudioPredictRequest() *AudioPredictRequest {
	return &AudioPredictRequest{}
}

func (p *AudioPredictRequest) InitDefault() {
}

var AudioPredictRequest_RequestId_DEFAULT string

func (p *AudioPredictRequest) GetRequestId() (v string) {
	if !p.IsSetRequestId() {
		return AudioPredictRequest_RequestId_DEFAULT
	}
	return *p.RequestId
}

var AudioPredictRequest_Organization_DEFAULT string

func (p *AudioPredictRequest) GetOrganization() (v string) {
	if !p.IsSetOrganization() {
		return AudioPredictRequest_Organization_DEFAULT
	}
	return *p.Organization
}

var AudioPredictRequest_Audio_DEFAULT *Audio

func (p *AudioPredictRequest) GetAudio() (v *Audio) {
	if !p.IsSetAudio() {
		return AudioPredictRequest_Audio_DEFAULT
	}
	return p.Audio
}
func (p *AudioPredictRequest) SetRequestId(val *string) {
	p.RequestId = val
}
func (p *AudioPredictRequest) SetOrganization(val *string) {
	p.Organization = val
}
func (p *AudioPredictRequest) SetAudio(val *Audio) {
	p.Audio = val
}

var fieldIDToName_AudioPredictRequest = map[int16]string{
	1: "requestId",
	2: "organization",
	3: "audio",
}

func (p *AudioPredictRequest) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *AudioPredictRequest) IsSetOrganization() bool {
	return p.Organization != nil
}

func (p *AudioPredictRequest) IsSetAudio() bool {
	return p.Audio != nil
}

func (p *AudioPredictRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AudioPredictRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AudioPredictRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RequestId = _field
	return nil
}
func (p *AudioPredictRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Organization = _field
	return nil
}
func (p *AudioPredictRequest) ReadField3(iprot thrift.TProtocol) error {
	_field := NewAudio()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Audio = _field
	return nil
}

func (p *AudioPredictRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AudioPredictRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AudioPredictRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestId() {
		if err = oprot.WriteFieldBegin("requestId", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.RequestId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AudioPredictRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrganization() {
		if err = oprot.WriteFieldBegin("organization", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Organization); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AudioPredictRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAudio() {
		if err = oprot.WriteFieldBegin("audio", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Audio.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AudioPredictRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioPredictRequest(%+v)", *p)

}

func (p *AudioPredictRequest) DeepEqual(ano *AudioPredictRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RequestId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Organization) {
		return false
	}
	if !p.Field3DeepEqual(ano.Audio) {
		return false
	}
	return true
}

func (p *AudioPredictRequest) Field1DeepEqual(src *string) bool {

	if p.RequestId == src {
		return true
	} else if p.RequestId == nil || src == nil {
		return false
	}
	if strings.Compare(*p.RequestId, *src) != 0 {
		return false
	}
	return true
}
func (p *AudioPredictRequest) Field2DeepEqual(src *string) bool {

	if p.Organization == src {
		return true
	} else if p.Organization == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Organization, *src) != 0 {
		return false
	}
	return true
}
func (p *AudioPredictRequest) Field3DeepEqual(src *Audio) bool {

	if !p.Audio.DeepEqual(src) {
		return false
	}
	return true
}

type AudioPredictResult_ struct {
	Result_ *string `thrift:"result,1,optional" frugal:"1,optional,string" json:"result,omitempty"`
}

func NewAudioPredictResult_() *AudioPredictResult_ {
	return &AudioPredictResult_{}
}

func (p *AudioPredictResult_) InitDefault() {
}

var AudioPredictResult__Result__DEFAULT string

func (p *AudioPredictResult_) GetResult_() (v string) {
	if !p.IsSetResult_() {
		return AudioPredictResult__Result__DEFAULT
	}
	return *p.Result_
}
func (p *AudioPredictResult_) SetResult_(val *string) {
	p.Result_ = val
}

var fieldIDToName_AudioPredictResult_ = map[int16]string{
	1: "result",
}

func (p *AudioPredictResult_) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *AudioPredictResult_) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AudioPredictResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AudioPredictResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Result_ = _field
	return nil
}

func (p *AudioPredictResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AudioPredictResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AudioPredictResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResult_() {
		if err = oprot.WriteFieldBegin("result", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Result_); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AudioPredictResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioPredictResult_(%+v)", *p)

}

func (p *AudioPredictResult_) DeepEqual(ano *AudioPredictResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Result_) {
		return false
	}
	return true
}

func (p *AudioPredictResult_) Field1DeepEqual(src *string) bool {

	if p.Result_ == src {
		return true
	} else if p.Result_ == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Result_, *src) != 0 {
		return false
	}
	return true
}

type AudioPredictor interface {
	Predict(ctx context.Context, request *AudioPredictRequest) (r *AudioPredictResult_, err error)

	Health(ctx context.Context) (r bool, err error)
}

type AudioPredictorPredictArgs struct {
	Request *AudioPredictRequest `thrift:"request,1" frugal:"1,default,AudioPredictRequest" json:"request"`
}

func NewAudioPredictorPredictArgs() *AudioPredictorPredictArgs {
	return &AudioPredictorPredictArgs{}
}

func (p *AudioPredictorPredictArgs) InitDefault() {
}

var AudioPredictorPredictArgs_Request_DEFAULT *AudioPredictRequest

func (p *AudioPredictorPredictArgs) GetRequest() (v *AudioPredictRequest) {
	if !p.IsSetRequest() {
		return AudioPredictorPredictArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *AudioPredictorPredictArgs) SetRequest(val *AudioPredictRequest) {
	p.Request = val
}

var fieldIDToName_AudioPredictorPredictArgs = map[int16]string{
	1: "request",
}

func (p *AudioPredictorPredictArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *AudioPredictorPredictArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AudioPredictorPredictArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AudioPredictorPredictArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAudioPredictRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *AudioPredictorPredictArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("predict_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AudioPredictorPredictArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AudioPredictorPredictArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioPredictorPredictArgs(%+v)", *p)

}

func (p *AudioPredictorPredictArgs) DeepEqual(ano *AudioPredictorPredictArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *AudioPredictorPredictArgs) Field1DeepEqual(src *AudioPredictRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type AudioPredictorPredictResult struct {
	Success *AudioPredictResult_ `thrift:"success,0,optional" frugal:"0,optional,AudioPredictResult_" json:"success,omitempty"`
}

func NewAudioPredictorPredictResult() *AudioPredictorPredictResult {
	return &AudioPredictorPredictResult{}
}

func (p *AudioPredictorPredictResult) InitDefault() {
}

var AudioPredictorPredictResult_Success_DEFAULT *AudioPredictResult_

func (p *AudioPredictorPredictResult) GetSuccess() (v *AudioPredictResult_) {
	if !p.IsSetSuccess() {
		return AudioPredictorPredictResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AudioPredictorPredictResult) SetSuccess(x interface{}) {
	p.Success = x.(*AudioPredictResult_)
}

var fieldIDToName_AudioPredictorPredictResult = map[int16]string{
	0: "success",
}

func (p *AudioPredictorPredictResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AudioPredictorPredictResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AudioPredictorPredictResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AudioPredictorPredictResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewAudioPredictResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *AudioPredictorPredictResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("predict_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AudioPredictorPredictResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AudioPredictorPredictResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioPredictorPredictResult(%+v)", *p)

}

func (p *AudioPredictorPredictResult) DeepEqual(ano *AudioPredictorPredictResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AudioPredictorPredictResult) Field0DeepEqual(src *AudioPredictResult_) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type AudioPredictorHealthArgs struct {
}

func NewAudioPredictorHealthArgs() *AudioPredictorHealthArgs {
	return &AudioPredictorHealthArgs{}
}

func (p *AudioPredictorHealthArgs) InitDefault() {
}

var fieldIDToName_AudioPredictorHealthArgs = map[int16]string{}

func (p *AudioPredictorHealthArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AudioPredictorHealthArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("health_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AudioPredictorHealthArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioPredictorHealthArgs(%+v)", *p)

}

func (p *AudioPredictorHealthArgs) DeepEqual(ano *AudioPredictorHealthArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type AudioPredictorHealthResult struct {
	Success *bool `thrift:"success,0,optional" frugal:"0,optional,bool" json:"success,omitempty"`
}

func NewAudioPredictorHealthResult() *AudioPredictorHealthResult {
	return &AudioPredictorHealthResult{}
}

func (p *AudioPredictorHealthResult) InitDefault() {
}

var AudioPredictorHealthResult_Success_DEFAULT bool

func (p *AudioPredictorHealthResult) GetSuccess() (v bool) {
	if !p.IsSetSuccess() {
		return AudioPredictorHealthResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *AudioPredictorHealthResult) SetSuccess(x interface{}) {
	p.Success = x.(*bool)
}

var fieldIDToName_AudioPredictorHealthResult = map[int16]string{
	0: "success",
}

func (p *AudioPredictorHealthResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AudioPredictorHealthResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AudioPredictorHealthResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AudioPredictorHealthResult) ReadField0(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Success = _field
	return nil
}

func (p *AudioPredictorHealthResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("health_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AudioPredictorHealthResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Success); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *AudioPredictorHealthResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AudioPredictorHealthResult(%+v)", *p)

}

func (p *AudioPredictorHealthResult) DeepEqual(ano *AudioPredictorHealthResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *AudioPredictorHealthResult) Field0DeepEqual(src *bool) bool {

	if p.Success == src {
		return true
	} else if p.Success == nil || src == nil {
		return false
	}
	if *p.Success != *src {
		return false
	}
	return true
}
