// Code generated by Kitex v0.5.2. DO NOT EDIT.

package eventpredictor

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	re "github.com/ishumei/krpc/protocols/event/kitex_gen/shumei/strategy/re"
)

func serviceInfo() *kitex.ServiceInfo {
	return eventPredictorServiceInfo
}

var eventPredictorServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "EventPredictor"
	handlerType := (*re.EventPredictor)(nil)
	methods := map[string]kitex.MethodInfo{
		"predict": kitex.NewMethodInfo(predictHandler, newEventPredictorPredictArgs, newEventPredictorPredictResult, false),
		"health":  kitex.NewMethodInfo(healthHandler, newEventPredictorHealthArgs, newEventPredictorHealthResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "re",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func predictHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*re.EventPredictorPredictArgs)
	realResult := result.(*re.EventPredictorPredictResult)
	success, err := handler.(re.EventPredictor).Predict(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEventPredictorPredictArgs() interface{} {
	return re.NewEventPredictorPredictArgs()
}

func newEventPredictorPredictResult() interface{} {
	return re.NewEventPredictorPredictResult()
}

func healthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {

	realResult := result.(*re.EventPredictorHealthResult)
	success, err := handler.(re.EventPredictor).Health(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newEventPredictorHealthArgs() interface{} {
	return re.NewEventPredictorHealthArgs()
}

func newEventPredictorHealthResult() interface{} {
	return re.NewEventPredictorHealthResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Predict(ctx context.Context, request *re.EventPredictRequest) (r *re.EventPredictResult_, err error) {
	var _args re.EventPredictorPredictArgs
	_args.Request = request
	var _result re.EventPredictorPredictResult
	if err = p.c.Call(ctx, "predict", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Health(ctx context.Context) (r bool, err error) {
	var _args re.EventPredictorHealthArgs
	var _result re.EventPredictorHealthResult
	if err = p.c.Call(ctx, "health", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
