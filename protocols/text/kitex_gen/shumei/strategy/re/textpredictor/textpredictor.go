// Code generated by Kitex v0.11.3. DO NOT EDIT.

package textpredictor

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	re "github.com/day253/krpc/protocols/text/kitex_gen/shumei/strategy/re"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"predict": kitex.NewMethodInfo(
		predictHandler,
		newTextPredictorPredictArgs,
		newTextPredictorPredictResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"health": kitex.NewMethodInfo(
		healthHandler,
		newTextPredictorHealthArgs,
		newTextPredictorHealthResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	textPredictorServiceInfo                = NewServiceInfo()
	textPredictorServiceInfoForClient       = NewServiceInfoForClient()
	textPredictorServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return textPredictorServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return textPredictorServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return textPredictorServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TextPredictor"
	handlerType := (*re.TextPredictor)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "re",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func predictHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*re.TextPredictorPredictArgs)
	realResult := result.(*re.TextPredictorPredictResult)
	success, err := handler.(re.TextPredictor).Predict(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newTextPredictorPredictArgs() interface{} {
	return re.NewTextPredictorPredictArgs()
}

func newTextPredictorPredictResult() interface{} {
	return re.NewTextPredictorPredictResult()
}

func healthHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*re.TextPredictorHealthArgs)
	realResult := result.(*re.TextPredictorHealthResult)
	success, err := handler.(re.TextPredictor).Health(ctx)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newTextPredictorHealthArgs() interface{} {
	return re.NewTextPredictorHealthArgs()
}

func newTextPredictorHealthResult() interface{} {
	return re.NewTextPredictorHealthResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Predict(ctx context.Context, request *re.TextPredictRequest) (r *re.TextPredictResult_, err error) {
	var _args re.TextPredictorPredictArgs
	_args.Request = request
	var _result re.TextPredictorPredictResult
	if err = p.c.Call(ctx, "predict", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Health(ctx context.Context) (r bool, err error) {
	var _args re.TextPredictorHealthArgs
	var _result re.TextPredictorHealthResult
	if err = p.c.Call(ctx, "health", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
